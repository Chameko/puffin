{# This file is the template for the syntax kind struct #}
// This file is automatically generated. DO NOT EDIT. To generate run `cargo run gen-syntax`

use SyntaxKind::*;

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
#[repr(u16)]
#[allow(non_camel_case_types)]
pub enum SyntaxKind {
    // Special syntax kinds that may appear during parsing but never make it into the final tree
    #[doc(hidden)]
    EOF,

{%- for t in concat(a=single_char_tokens, b=multi_char_tokens) %}
    {{t.1}},
{%- endfor -%}
{%- for kw in keywords %}
    KW_{{kw | upper}},
{%- endfor %}
{%- for t in concat(a=literals, b=tokens, c=nodes) %}
    {{t}},
{%- endfor -%}
    // Allows for casting from u16 safely
    __LAST,
}

macro_rules! T {
    {%- for t in concat(a=single_char_tokens, b=multi_char_tokens) %}
    {%- if t.0 == '{' or t.0 == '}' or t.0 == '[' or t.0 == ']' or t.0 == '(' or t.0 == ')' %}
    ('{{t.0}}') => {
        $crate::SyntaxKind::{{t.1}}
    };
    {%- else %}
    ({{t.0}}) => {
        $crate::SyntaxKind::{{t.1}}
    };
    {%- endif %}
    {%- endfor -%}
    {% for kw in keywords %}
    ({{kw}}) => {
        $crate::SyntaxKind::KW_{{kw | upper}}
    };
    {%- endfor %}
}

impl SyntaxKind {
    #[rustfmt::skip]
    pub fn is_keyword(self) -> bool {
        matches!(self,
        {%- for kw in keywords %}
        {%  if loop.index > 1 %}| {% endif %}KW_{{kw | upper}}
        {%- endfor %}
        )
    }

    #[rustfmt::skip]
    pub fn is_symbol(self) -> bool {
        matches!(self,
    {%- for t in concat(a=single_char_tokens, b=multi_char_tokens) %}
        {%  if loop.index > 1 %}| {% endif %}{{t.1}}
    {%- endfor %}
        )
    }

    #[rustfmt::skip]
    pub fn is_literal(self) -> bool {
        matches!(self,
    {%- for t in literals %}
            {%  if loop.index > 1 %}| {% endif %}{{t}}
    {%- endfor %}
        )
    }
}


impl From<u16> for SyntaxKind {
    fn from(d: u16) -> SyntaxKind {
        assert!(d <= (SyntaxKind::__LAST as u16));
        unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }
    }
}

impl From<SyntaxKind> for u16 {
    fn from(k: SyntaxKind) -> u16 {
        k as u16
    }
}